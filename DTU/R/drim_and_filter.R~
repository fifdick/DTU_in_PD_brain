#####################################################DRIM AND FILTER#####################################
#'apply drimseq functions and filter
#'
#' @param tx_lst df or list of df transcript abundances tximport object, or list of transcript abundance tximport objects (per cohort one df)
#' @param annot df or list of df annotation df indicating transcript and gene id ( with columns target_id, parent_id and ntx (# of transcripts ), or list of annotation dfs, if annotation file is distinct for cohort
#' @param info df or list of df with 3 columns (sample_id,condition,rin) 
#' @param minTX <numeric> min threshold for filtering transcript by expr value
#' @param minGene <numeric> min threshold of gene expression for filtering
#' @param covariates <list> names of variables to include into model design (actual values must be present in info)
#' @return DRIMseq object or list of DRIMseq obj after applying DMPrecision, DMFit and DMTest
drim_and_filter <- function(tx_lst,annot,info,minTX=3,minGene=10,covariates)
{
  
  stopifnot(is.list(covariates))
  sapply(info,function(i){stopifnot(covariates %in% colnames(i))})
  stopifnot(is.numeric(minTX))
  stopifnot(is.numeric(minGene))
  
  countData <- lapply(seq(1,length(tx_lst)), function(i){
    counts <- data.frame(gene_id=annot[[i]]$GENEID,feature_id=annot[[i]]$TXNAME,tx_lst[[i]]$counts)
    return(counts)
  })
  Ds <-lapply(seq(1,length(info)),function(i){ 	
    d <- dmDSdata(counts=countData[[i]],samples=info[[i]])
    print(d)	
    return(d)
  })
  names(Ds) <- names(info)
  cat(crayon::blue("Applying filter"))
  #possibility to introduce some genreralization here to adjust the filter depneding on the the number of samples (n) loosen filter threshold a bit if n is greater
  
  #prepare covariate names for formula
  covariates<-lapply(covariates,function(c){paste0(" + ",as.character(c))})
  
  Ds <- lapply(Ds,function(d)
  {
    n.small<-min(table(DRIMSeq::samples(d)$condition))
    n <- nrow(DRIMSeq::samples(d))
    d<-dmFilter(d,
                min_samps_feature_expr=n.small,min_feature_expr=minTX,
                min_samps_feature_prop=n.small,min_feature_prop=0.1,
                min_samps_gene_expr=n,min_gene_expr=minGene)
    cat(crayon::blue("Distribution of isoforms per gene"))
    print(table(table(DRIMSeq::counts(d)$gene_id)))
    design_full <- model.matrix(formula(paste("~condition",stringi::stri_flatten(covariates))),data=DRIMSeq::samples(d))#~condition + rin
    print(design_full)
    set.seed(1)
    system.time({
      d <- dmPrecision(d,design=design_full)
      #didnt come up with a better name for the pdf as the first sample name from the respective cohort
      pdf(paste0("./precisionPlot",DRIMSeq::samples(d)[1,"sample_id"],".pdf"))
      plotPrecision(d)
      dev.off()
      print(head(genewise_precision(d)))
      d <- dmFit(d,design=design_full)
      d <- dmTest(d,coef=2) #check what thismeans and how in fit, or modelmatrix rin is included
    })
    return(d)
  })
  names(Ds) <- names(info)
  return(Ds)
}